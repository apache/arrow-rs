# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

[package]
name = "arrow-data"
version = { workspace = true }
description = "Array data abstractions for Apache Arrow"
homepage = { workspace = true }
repository = { workspace = true }
authors = { workspace = true }
license = { workspace = true }
keywords = { workspace = true }
include = { workspace = true }
edition = { workspace = true }
rust-version = { workspace = true }

[lib]
name = "arrow_data"
path = "src/lib.rs"
bench = false

[features]
# force_validate runs full data validation for all arrays that are created
# this is not enabled by default as it is too computationally expensive
# but is run as part of our CI checks
force_validate = []
# Enable ffi support
ffi = ["arrow-schema/ffi"]

# HACKY: For offset-ed offset buffer of variable-sized binary array
# The valid FFI output is to record the offset buffer's offset into FFI's
# `offset` field and expose the beginning of the buffer as the pointer.
# So the consumer can calculate correctly the length of data buffer.
# However, due to Arrow Java's issue: https://github.com/apache/arrow/issues/42156,
# Arrow Java does not support `offset` field in the FFI output. It causes
# no sliced binary array can be passed between arrow-rs and Arrow Java.
# To workaround this issue, we have to enforce offset-ed offset buffer to
# be exposed at the sliced buffer's beginning. When calculating the length
# of data buffer, we assume the first element of the offset buffer is always 0
# (this is how Arrow Java and arrow-rs do). This is a hacky solution and
# should be removed once Arrow Java supports `offset` field in the FFI output.
ffi_enforce_no_offset = []

[package.metadata.docs.rs]
features = ["ffi"]

[dependencies]

arrow-buffer = { workspace = true }
arrow-schema = { workspace = true }

num = { version = "0.4", default-features = false, features = ["std"] }
half = { version = "2.1", default-features = false }

[dev-dependencies]

[build-dependencies]
