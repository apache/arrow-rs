// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

//! Support for the [Arrow IPC Format]
//!
//! The Arrow IPC format defines how to read and write [`RecordBatch`]es to/from
//! a file or stream of bytes. This format can be used to serialize and deserialize
//! data to files and over the network.
//!
//! There are two variants of the IPC format:
//! 1. [IPC Streaming Format]: Supports streaming data sources, implemented by
//!    [StreamReader] and [StreamWriter]
//!
//! 2. [IPC File Format]: Supports random access, implemented by [FileReader] and
//!    [FileWriter].
//!
//! See the [`reader`] and [`writer`] modules for more information.
//!
//! [Arrow IPC Format]: https://arrow.apache.org/docs/format/Columnar.html#serialization-and-interprocess-communication-ipc
//! [IPC Streaming Format]: https://arrow.apache.org/docs/format/Columnar.html#ipc-streaming-format
//! [StreamReader]: reader::StreamReader
//! [StreamWriter]: writer::StreamWriter
//! [IPC File Format]: https://arrow.apache.org/docs/format/Columnar.html#ipc-file-format
//! [FileReader]: reader::FileReader
//! [FileWriter]: writer::FileWriter

#![warn(missing_docs)]
pub mod convert;
pub mod reader;
pub mod writer;

mod compression;

#[allow(clippy::redundant_closure)]
#[allow(clippy::needless_lifetimes)]
#[allow(clippy::extra_unused_lifetimes)]
#[allow(clippy::redundant_static_lifetimes)]
#[allow(clippy::redundant_field_names)]
#[allow(non_camel_case_types)]
#[allow(missing_docs)] // Because this is autogenerated
pub mod gen;

pub use self::gen::File::*;
pub use self::gen::Message::*;
pub use self::gen::Schema::*;
pub use self::gen::SparseTensor::*;
pub use self::gen::Tensor::*;

const ARROW_MAGIC: [u8; 6] = [b'A', b'R', b'R', b'O', b'W', b'1'];
const CONTINUATION_MARKER: [u8; 4] = [0xff; 4];

impl Endianness {
    /// Returns true if the endianness of the source system matches the endianness of the target system.
    pub fn equals_to_target_endianness(self) -> bool {
        match self {
            Self::Little => cfg!(target_endian = "little"),
            Self::Big => cfg!(target_endian = "big"),
            _ => false,
        }
    }
}
