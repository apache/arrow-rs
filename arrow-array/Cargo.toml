# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

[package]
name = "arrow-array"
version = { workspace = true }
description = "Array abstractions for Apache Arrow"
homepage = { workspace = true }
repository = { workspace = true }
authors = { workspace = true }
license = { workspace = true }
keywords = { workspace = true }
include = { workspace = true }
edition = { workspace = true }
rust-version = { workspace = true }

[lib]
name = "arrow_array"
path = "src/lib.rs"
bench = false


[target.'cfg(target_arch = "wasm32")'.dependencies]
ahash = { version = "0.8", default-features = false, features = ["compile-time-rng"] }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
ahash = { version = "0.8", default-features = false, features = ["runtime-rng"] }

[dependencies]
arrow-buffer = { workspace = true }
arrow-schema = { workspace = true }
arrow-data = { workspace = true }
chrono = { workspace = true }
chrono-tz = { version = "0.9", optional = true }
num = { version = "0.4.1", default-features = false, features = ["std"] }
half = { version = "2.1", default-features = false, features = ["num-traits"] }
hashbrown = { version = "0.14", default-features = false }

[features]
ffi = ["arrow-schema/ffi", "arrow-data/ffi"]

# HACKY: For offset-ed offset buffer of variable-sized binary array
# The valid FFI output is to record the offset buffer's offset into FFI's
# `offset` field and expose the beginning of the buffer as the pointer.
# So the consumer can calculate correctly the length of data buffer.
# However, due to Arrow Java's issue: https://github.com/apache/arrow/issues/42156,
# Arrow Java does not support `offset` field in the FFI output. It causes
# no sliced binary array can be passed between arrow-rs and Arrow Java.
# To workaround this issue, we have to enforce offset-ed offset buffer to
# be exposed at the sliced buffer's beginning. When calculating the length
# of data buffer, we assume the first element of the offset buffer is always 0
# (this is how Arrow Java and arrow-rs do). This is a hacky solution and
# should be removed once Arrow Java supports `offset` field in the FFI output.
ffi_enforce_no_offset = ["arrow-data/ffi_enforce_no_offset"]

[dev-dependencies]
rand = { version = "0.8", default-features = false, features = ["std", "std_rng"] }
criterion = { version = "0.5", default-features = false }

[build-dependencies]

[[bench]]
name = "occupancy"
harness = false

[[bench]]
name = "gc_view_types"
harness = false

[[bench]]
name = "fixed_size_list_array"
harness = false
